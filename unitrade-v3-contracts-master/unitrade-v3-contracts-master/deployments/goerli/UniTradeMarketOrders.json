{
  "address": "0x47A97031F2135D53DC443C586502BFf11d777309",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInOffered",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOutExpected",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unitradeFee",
          "type": "uint256"
        }
      ],
      "name": "OrderExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum UniTradeMarketOrders.SwapType",
          "name": "swapType",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "amountInOffered",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutExpected",
          "type": "uint256"
        }
      ],
      "name": "executeOrder",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract UniTradeOrderBook",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "contract UniTradeOrderBook",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAndBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcff9e011cb65400a1e521d6c3884e18120e549553c88e80b11195fdd4a71d133",
  "receipt": {
    "to": null,
    "from": "0xA8E953ac33efEe299515f7100c4d644Cda8AD183",
    "contractAddress": "0x47A97031F2135D53DC443C586502BFf11d777309",
    "transactionIndex": 12,
    "gasUsed": "2003557",
    "logsBloom": "0x
    "blockHash": "0xed2df9c39abd201766c09e9800f91c6482e7e757af46c144a45bcbfbb13ac791",
    "transactionHash": "0xcff9e011cb65400a1e521d6c3884e18120e549553c88e80b11195fdd4a71d133",
    "logs": [],
    "blockNumber": 4647709,
    "cumulativeGasUsed": "2832601",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "75e69aba2bcfe20369fef6516fd418bf",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unitradeFee\",\"type\":\"uint256\"}],\"name\":\"OrderExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum UniTradeMarketOrders.SwapType\",\"name\":\"swapType\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountInOffered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutExpected\",\"type\":\"uint256\"}],\"name\":\"executeOrder\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract UniTradeOrderBook\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"contract UniTradeOrderBook\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAndBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniTradeMarketOrders.sol\":\"UniTradeMarketOrders\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\",\"keccak256\":\"0x0920a26df9837a073c6b24c4e2542d9409c173748e0c6728a1ae39ce5c368899\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/UniTradeIncinerator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport { SafeMathUpgradeable as SafeMath } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract UniTradeIncinerator is Initializable {\\n    using SafeMath for uint256;\\n\\n    uint256 constant UINT256_MAX = ~uint256(0);\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public unitrade;\\n    uint256 lastIncinerated;\\n\\n    event UniTradeToBurn(uint256 etherIn);\\n    event UniTradeBurned(uint256 etherIn, uint256 tokensBurned);\\n\\n    function initialize(IUniswapV2Router02 _uniswapV2Router, address _unitrade) initializer public {\\n        uniswapV2Router = _uniswapV2Router;\\n        unitrade = _unitrade;\\n        lastIncinerated = block.timestamp;\\n    }\\n\\n    function burn() external payable returns (bool) {\\n        require(msg.value > 0, \\\"Nothing to burn\\\");\\n\\n        emit UniTradeToBurn(msg.value);\\n\\n        if (block.timestamp < lastIncinerated + 1 days) {\\n            return true;\\n        }\\n\\n        lastIncinerated = block.timestamp;\\n\\n        address[] memory _tokenPair = new address[](2);\\n        _tokenPair[0] = uniswapV2Router.WETH();\\n        _tokenPair[1] = unitrade;\\n\\n        uint256[] memory _swapResult = uniswapV2Router.swapExactETHForTokens{\\n            value: address(this).balance\\n        }(\\n            0, // take any\\n            _tokenPair,\\n            address(this),\\n            UINT256_MAX\\n        );\\n\\n        emit UniTradeBurned(_swapResult[0], _swapResult[1]);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x7f891d078dd297dcc938780753d04e1c67a44d0e833ff4eac48666ba7f06c5d8\",\"license\":\"UNLICENSED\"},\"contracts/UniTradeMarketOrders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport { SafeMathUpgradeable as SafeMath } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { OwnableUpgradeable as Ownable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable as ReentrancyGuard } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20Upgradeable as IERC20 } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IUniTradeStaker.sol\\\";\\nimport \\\"./UniTradeOrderBook.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n\\ncontract UniTradeMarketOrders is Initializable, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 constant UINT256_MAX = ~uint256(0);\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IUniswapV2Factory public uniswapV2Factory;\\n    UniTradeOrderBook public orderBook;\\n\\n    enum SwapType {TokensForTokens, EthForTokens, TokensForEth}\\n\\n    event OrderExecuted(\\n        address indexed taker,\\n        address[] path,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256[] amounts,\\n        uint256 unitradeFee\\n    );\\n\\n    function initialize(\\n        UniTradeOrderBook _orderBook\\n    ) initializer public {\\n        __Ownable_init();\\n        uniswapV2Router = _orderBook.uniswapV2Router();\\n        uniswapV2Factory = _orderBook.uniswapV2Factory();\\n        orderBook = _orderBook;\\n    }\\n\\n    receive() external payable {} // to receive ETH from Uniswap\\n\\n    function executeOrder(\\n        SwapType swapType,\\n        address[] memory path,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (uint256[] memory amounts)\\n    {       \\n        address _taker = msg.sender;\\n        address _wethAddress = uniswapV2Router.WETH();\\n        address tokenIn = path[0];\\n        address tokenOut = path[path.length-1];\\n        uint256 amountIn = amountInOffered;\\n\\n        if (swapType != SwapType.EthForTokens) {\\n            if (swapType == SwapType.TokensForEth) {\\n                require(tokenOut == _wethAddress, \\\"Token out must be WETH\\\");\\n            }\\n            uint256 beforeBalance = IERC20(tokenIn).balanceOf(address(this));\\n            // transfer tokenIn funds in necessary for order execution\\n            TransferHelper.safeTransferFrom(\\n                tokenIn,\\n                msg.sender,\\n                address(this),\\n                amountIn\\n            );\\n            uint256 afterBalance = IERC20(tokenIn).balanceOf(address(this));\\n            if (afterBalance.sub(beforeBalance) != amountIn) {\\n                amountIn = afterBalance.sub(beforeBalance);\\n            }\\n            require(amountIn > 0, \\\"Invalid final offered amount\\\");\\n        } else {\\n            require(tokenIn == _wethAddress, \\\"Token in must be WETH\\\");\\n        }\\n        \\n        uint256 unitradeFee = 0;\\n\\n        if (swapType != SwapType.EthForTokens) {\\n            TransferHelper.safeApprove(\\n                tokenIn,\\n                address(uniswapV2Router),\\n                amountIn\\n            );\\n        }\\n\\n        if (swapType == SwapType.TokensForTokens) {\\n            // Note: Collects fee from input token then swap for ETH\\n            uint256 _tokenFee = amountIn.mul(orderBook.feeMul()).div(orderBook.feeDiv());\\n\\n            uint256 beforeBalance = IERC20(tokenOut).balanceOf(_taker);\\n            uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                amountIn.sub(_tokenFee),\\n                amountOutExpected,\\n                path,\\n                _taker,\\n                UINT256_MAX\\n            );\\n            uint256 afterBalance = IERC20(tokenOut).balanceOf(_taker);\\n            amounts = new uint256[](2);\\n            amounts[0] = amountIn.sub(_tokenFee);\\n            amounts[1] = afterBalance.sub(beforeBalance);\\n\\n            if (_tokenFee > 0) {\\n                address[] memory _wethPair = createPair(tokenIn, uniswapV2Router.WETH());\\n\\n                beforeBalance = IERC20(uniswapV2Router.WETH()).balanceOf(address(this));\\n                uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    _tokenFee,\\n                    0, // take any\\n                    _wethPair,\\n                    address(this),\\n                    UINT256_MAX\\n                );\\n                afterBalance = IERC20(uniswapV2Router.WETH()).balanceOf(address(this));\\n                unitradeFee = afterBalance.sub(beforeBalance);\\n            }\\n        } else if (swapType == SwapType.TokensForEth) {\\n            uint256 beforeBalance = address(this).balance;\\n            uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                amountIn,\\n                amountOutExpected,\\n                path,\\n                address(this),\\n                UINT256_MAX\\n            );\\n            uint256 afterBalance = address(this).balance;\\n            amounts = new uint256[](2);\\n            amounts[0] = amountIn;\\n            amounts[1] = afterBalance.sub(beforeBalance);\\n\\n            // Note: Collects ETH fee from output\\n            unitradeFee = amounts[1].mul(orderBook.feeMul()).div(orderBook.feeDiv());\\n\\n            if (amounts[1].sub(unitradeFee) > 0) {\\n                // Transfer `output - fee` to the taker\\n                TransferHelper.safeTransferETH(\\n                    _taker,\\n                    amounts[1].sub(unitradeFee)\\n                );\\n            }\\n        } else if (swapType == SwapType.EthForTokens) {\\n            uint256 totalEthDeposited = msg.value;\\n\\n            // Note: Collects ETH fee from input\\n            unitradeFee = totalEthDeposited.mul(orderBook.feeMul()).div(orderBook.feeDiv());\\n\\n            uint256 beforeBalance = IERC20(tokenOut).balanceOf(_taker);\\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: totalEthDeposited.sub(unitradeFee)\\n            }(\\n                amountOutExpected,\\n                path,\\n                _taker,\\n                UINT256_MAX\\n            );\\n            uint256 afterBalance = IERC20(tokenOut).balanceOf(_taker);\\n            amounts = new uint256[](2);\\n            amounts[0] = totalEthDeposited.sub(unitradeFee);\\n            amounts[1] = afterBalance.sub(beforeBalance);\\n        }\\n\\n        emit OrderExecuted(_taker, path, amountInOffered, amountOutExpected, amounts, unitradeFee);\\n    }\\n\\n    function stakeAndBurn() external {\\n        uint256 unitradeFee = address(this).balance;\\n\\n        if (unitradeFee > 0) {\\n            uint256 burnAmount = unitradeFee.mul(orderBook.splitMul()).div(orderBook.splitDiv());\\n            if (burnAmount > 0) {\\n                orderBook.incinerator().burn{value: burnAmount}(); //no require\\n            }\\n            uint256 stakeAmount = unitradeFee.sub(burnAmount);\\n            if(stakeAmount > 0) {\\n                orderBook.staker().deposit{value: stakeAmount}(); //no require\\n            }\\n        }\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        address[] memory _addressPair = new address[](2);\\n        _addressPair[0] = tokenA;\\n        _addressPair[1] = tokenB;\\n        return _addressPair;\\n    }\\n}\",\"keccak256\":\"0x5f20d824ec8907b83cd22779248a70c382af03b26695891f62bb9fd3a3f3524c\",\"license\":\"UNLICENSED\"},\"contracts/UniTradeOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\nimport { SafeMathUpgradeable as SafeMath } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { OwnableUpgradeable as Ownable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ReentrancyGuardUpgradeable as ReentrancyGuard } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { IERC20Upgradeable as IERC20 } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./UniTradeIncinerator.sol\\\";\\nimport \\\"./interfaces/IUniTradeStaker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\ncontract UniTradeOrderBook is Initializable, Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    uint256 constant UINT256_MAX = ~uint256(0);\\n    IUniswapV2Router02 public uniswapV2Router;\\n    IUniswapV2Factory public uniswapV2Factory;\\n    UniTradeIncinerator public incinerator;\\n    IUniTradeStaker public staker;\\n    uint16 public feeMul;\\n    uint16 public feeDiv;\\n    uint16 public splitMul;\\n    uint16 public splitDiv;\\n    uint16 public stopMargin;\\n\\n    enum OrderType {Limit, Stop}\\n    enum SwapType {TokensForTokens, EthForTokens, TokensForEth}\\n    enum OrderState {Placed, Cancelled, Executed}\\n\\n    struct Order {\\n        OrderType orderType;\\n        SwapType swapType;\\n        address payable maker;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountInOffered;\\n        uint256 amountOutExpected;\\n        uint256 executorFee;\\n        uint256 totalEthDeposited;\\n        uint256 activeOrderIndex;\\n        OrderState orderState;\\n        bool deflationary;\\n    }\\n\\n    uint256 private orderNumber;\\n    uint256[] private activeOrders;\\n    mapping(uint256 => Order) private orders;\\n    mapping(address => uint256[]) private ordersForAddress;\\n\\n    event OrderPlaced(\\n        uint256 indexed orderId,\\n        OrderType orderType,\\n        SwapType swapType,\\n        address payable indexed maker,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256 executorFee,\\n        uint256 totalEthDeposited\\n    );\\n    event OrderUpdated(\\n        uint256 indexed orderId,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256 executorFee\\n    );\\n    event OrderCancelled(uint256 indexed orderId);\\n    event OrderExecuted(\\n        uint256 indexed orderId,\\n        address indexed executor,\\n        uint256[] amounts,\\n        uint256 unitradeFee\\n    );\\n    event StakerUpdated(address newStaker);\\n\\n    modifier exists(uint256 orderId) {\\n        require(orders[orderId].maker != address(0), \\\"Order not found\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        IUniswapV2Router02 _uniswapV2Router,\\n        UniTradeIncinerator _incinerator,\\n        IUniTradeStaker _staker,\\n        uint16 _feeMul,\\n        uint16 _feeDiv,\\n        uint16 _splitMul,\\n        uint16 _splitDiv,\\n        uint16 _stopMargin\\n    ) initializer public {\\n        __Ownable_init();\\n        uniswapV2Router = _uniswapV2Router;\\n        uniswapV2Factory = IUniswapV2Factory(_uniswapV2Router.factory());\\n        incinerator = _incinerator;\\n        staker = _staker;\\n        feeMul = _feeMul;\\n        feeDiv = _feeDiv;\\n        splitMul = _splitMul;\\n        splitDiv = _splitDiv;\\n        stopMargin = _stopMargin;\\n    }\\n\\n    function placeOrder(\\n        OrderType orderType,\\n        SwapType swapType,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256 executorFee\\n    ) external payable nonReentrant returns (uint256) {\\n        require(amountInOffered > 0, \\\"Invalid offered amount\\\");\\n        require(amountOutExpected > 0, \\\"Invalid expected amount\\\");\\n        require(executorFee > 0, \\\"Invalid executor fee\\\");\\n\\n        address _wethAddress = uniswapV2Router.WETH();\\n        bool deflationary = false;\\n\\n        if (swapType != SwapType.EthForTokens) {\\n            require(\\n                msg.value == executorFee,\\n                \\\"Transaction value must match executor fee\\\"\\n            );\\n            if (swapType == SwapType.TokensForEth) {\\n                require(tokenOut == _wethAddress, \\\"Token out must be WETH\\\");\\n            } else {\\n                getPair(tokenIn, _wethAddress);\\n            }\\n            uint256 beforeBalance = IERC20(tokenIn).balanceOf(address(this));\\n            // transfer tokenIn funds is necessary for order execution\\n            TransferHelper.safeTransferFrom(\\n                tokenIn,\\n                msg.sender,\\n                address(this),\\n                amountInOffered\\n            );\\n            uint256 afterBalance = IERC20(tokenIn).balanceOf(address(this));\\n            if (afterBalance.sub(beforeBalance) != amountInOffered) {\\n                amountInOffered = afterBalance.sub(beforeBalance);\\n                deflationary = true;\\n            }\\n            require(amountInOffered > 0, \\\"Invalid final offered amount\\\");\\n        } else {\\n            require(tokenIn == _wethAddress, \\\"Token in must be WETH\\\");\\n            require(\\n                msg.value == amountInOffered.add(executorFee),\\n                \\\"Transaction value must match offer and fee\\\"\\n            );\\n        }\\n\\n        // get canonical uniswap pair address\\n        address _pairAddress = getPair(tokenIn, tokenOut);\\n\\n        (uint256 _orderId, Order memory _order) = registerOrder(\\n            swapType,\\n            orderType,\\n            msg.sender,\\n            tokenIn,\\n            tokenOut,\\n            _pairAddress,\\n            amountInOffered,\\n            amountOutExpected,\\n            executorFee,\\n            msg.value,\\n            deflationary\\n        );\\n\\n        emit OrderPlaced(\\n            _orderId,\\n            _order.orderType,\\n            _order.swapType,\\n            _order.maker,\\n            _order.tokenIn,\\n            _order.tokenOut,\\n            _order.amountInOffered,\\n            _order.amountOutExpected,\\n            _order.executorFee,\\n            _order.totalEthDeposited\\n        );\\n\\n        return _orderId;\\n    }\\n\\n    function updateOrder(\\n        uint256 orderId,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256 executorFee\\n    ) external payable exists(orderId) nonReentrant returns (bool) {\\n        Order memory _updatingOrder = orders[orderId];\\n        require(msg.sender == _updatingOrder.maker, \\\"Permission denied\\\");\\n        require(\\n            _updatingOrder.orderState == OrderState.Placed,\\n            \\\"Cannot update order\\\"\\n        );\\n        require(amountInOffered > 0, \\\"Invalid offered amount\\\");\\n        require(amountOutExpected > 0, \\\"Invalid expected amount\\\");\\n        require(executorFee > 0, \\\"Invalid executor fee\\\");\\n\\n        if (_updatingOrder.swapType == SwapType.EthForTokens) {\\n            uint256 newTotal = amountInOffered.add(executorFee);\\n            if (newTotal > _updatingOrder.totalEthDeposited) {\\n                require(\\n                    msg.value == newTotal.sub(_updatingOrder.totalEthDeposited),\\n                    \\\"Additional deposit must match\\\"\\n                );\\n            } else if (newTotal < _updatingOrder.totalEthDeposited) {\\n                TransferHelper.safeTransferETH(\\n                    _updatingOrder.maker,\\n                    _updatingOrder.totalEthDeposited.sub(newTotal)\\n                );\\n            }\\n            _updatingOrder.totalEthDeposited = newTotal;\\n        } else {\\n            if (executorFee > _updatingOrder.executorFee) {\\n                require(\\n                    msg.value == executorFee.sub(_updatingOrder.executorFee),\\n                    \\\"Additional fee must match\\\"\\n                );\\n            } else if (executorFee < _updatingOrder.executorFee) {\\n                TransferHelper.safeTransferETH(\\n                    _updatingOrder.maker,\\n                    _updatingOrder.executorFee.sub(executorFee)\\n                );\\n            }\\n            _updatingOrder.totalEthDeposited = executorFee;\\n            if (amountInOffered > _updatingOrder.amountInOffered) {\\n                uint256 beforeBalance = IERC20(_updatingOrder.tokenIn)\\n                    .balanceOf(address(this));\\n                TransferHelper.safeTransferFrom(\\n                    _updatingOrder.tokenIn,\\n                    msg.sender,\\n                    address(this),\\n                    amountInOffered.sub(_updatingOrder.amountInOffered)\\n                );\\n                uint256 afterBalance = IERC20(_updatingOrder.tokenIn).balanceOf(\\n                    address(this)\\n                );\\n                amountInOffered = _updatingOrder.amountInOffered.add(\\n                    afterBalance.sub(beforeBalance)\\n                );\\n            } else if (amountInOffered < _updatingOrder.amountInOffered) {\\n                TransferHelper.safeTransfer(\\n                    _updatingOrder.tokenIn,\\n                    _updatingOrder.maker,\\n                    _updatingOrder.amountInOffered.sub(amountInOffered)\\n                );\\n            }\\n        }\\n\\n        // update order record\\n        _updatingOrder.amountInOffered = amountInOffered;\\n        _updatingOrder.amountOutExpected = amountOutExpected;\\n        _updatingOrder.executorFee = executorFee;\\n        orders[orderId] = _updatingOrder;\\n\\n        emit OrderUpdated(\\n            orderId,\\n            amountInOffered,\\n            amountOutExpected,\\n            executorFee\\n        );\\n\\n        return true;\\n    }\\n\\n    function cancelOrder(uint256 orderId)\\n        external\\n        exists(orderId)\\n        nonReentrant\\n        returns (bool)\\n    {\\n        Order memory _cancellingOrder = orders[orderId];\\n        require(msg.sender == _cancellingOrder.maker, \\\"Permission denied\\\");\\n        require(\\n            _cancellingOrder.orderState == OrderState.Placed,\\n            \\\"Cannot cancel order\\\"\\n        );\\n\\n        proceedOrder(orderId, OrderState.Cancelled);\\n\\n        // Revert token allocation, funds, and fees\\n        if (_cancellingOrder.swapType != SwapType.EthForTokens) {\\n            TransferHelper.safeTransfer(\\n                _cancellingOrder.tokenIn,\\n                _cancellingOrder.maker,\\n                _cancellingOrder.amountInOffered\\n            );\\n        }\\n\\n        TransferHelper.safeTransferETH(\\n            _cancellingOrder.maker,\\n            _cancellingOrder.totalEthDeposited\\n        );\\n\\n        emit OrderCancelled(orderId);\\n        return true;\\n    }\\n\\n    function executeOrder(uint256 orderId)\\n        external\\n        exists(orderId)\\n        nonReentrant\\n        returns (uint256[] memory amounts)\\n    {\\n        Order memory _executingOrder = orders[orderId];\\n        require(\\n            _executingOrder.orderState == OrderState.Placed,\\n            \\\"Cannot execute order\\\"\\n        );\\n\\n        proceedOrder(orderId, OrderState.Executed);\\n\\n        address[] memory _addressPair = createPair(\\n            _executingOrder.tokenIn,\\n            _executingOrder.tokenOut\\n        );\\n        uint256 unitradeFee;\\n        uint256 _tokenFee;\\n        uint256 amountIn;\\n        uint256 minAmountOut;\\n\\n        // Set swap params\\n        if (_executingOrder.swapType == SwapType.TokensForTokens) {\\n            _tokenFee = _executingOrder.amountInOffered.mul(feeMul).div(\\n                feeDiv\\n            );\\n            amountIn = _executingOrder.amountInOffered.sub(_tokenFee);\\n            minAmountOut = _executingOrder.amountOutExpected;\\n        }\\n        else if (_executingOrder.swapType == SwapType.TokensForEth) {\\n            amountIn = _executingOrder.amountInOffered;\\n            minAmountOut = _executingOrder.amountOutExpected;\\n        }\\n        else if (_executingOrder.swapType == SwapType.EthForTokens) {\\n            // Subtract fee from initial swap\\n            uint256 amountEthOffered = _executingOrder.totalEthDeposited.sub(\\n                _executingOrder.executorFee\\n            );\\n            unitradeFee = amountEthOffered.mul(feeMul).div(feeDiv);\\n            amountIn = amountEthOffered.sub(unitradeFee);\\n            minAmountOut = _executingOrder.amountOutExpected;\\n        }\\n\\n        if (_executingOrder.orderType == OrderType.Stop) {\\n            minAmountOut = minAmountOut.sub(minAmountOut.mul(stopMargin).div(100));\\n            uint256 amountOut = uniswapV2Router.getAmountsOut(amountIn, _addressPair)[1];\\n            require(amountOut >= minAmountOut, \\\"Amount out is < target's amount margin\\\");\\n            require(amountOut <= _executingOrder.amountOutExpected, \\\"Amount out is > target amount\\\");\\n        }\\n\\n        // Execute swap\\n        if (_executingOrder.swapType == SwapType.TokensForTokens) {\\n            TransferHelper.safeApprove(\\n                _executingOrder.tokenIn,\\n                address(uniswapV2Router),\\n                _executingOrder.amountInOffered\\n            );          \\n\\n            if (_executingOrder.deflationary) {\\n                uint256 beforeBalance = IERC20(_executingOrder.tokenOut)\\n                    .balanceOf(_executingOrder.maker);\\n                uniswapV2Router\\n                    .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                    amountIn,\\n                    minAmountOut,\\n                    _addressPair,\\n                    _executingOrder.maker,\\n                    UINT256_MAX\\n                );\\n                uint256 afterBalance = IERC20(_executingOrder.tokenOut)\\n                    .balanceOf(_executingOrder.maker);\\n                amounts = new uint256[](2);\\n                amounts[0] = amountIn;\\n                amounts[1] = afterBalance.sub(beforeBalance);\\n            } else {\\n                amounts = uniswapV2Router.swapExactTokensForTokens(\\n                    amountIn,\\n                    minAmountOut,\\n                    _addressPair,\\n                    _executingOrder.maker,\\n                    UINT256_MAX\\n                );\\n            }\\n\\n            if (_tokenFee > 0) {\\n                // Convert x% of tokens to ETH as fee\\n                address[] memory _wethPair = createPair(\\n                    _executingOrder.tokenIn,\\n                    uniswapV2Router.WETH()\\n                );\\n                if (_executingOrder.deflationary) {\\n                    uint256 beforeBalance = IERC20(uniswapV2Router.WETH())\\n                        .balanceOf(address(this));\\n                    uniswapV2Router\\n                        .swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                        _tokenFee,\\n                        0, //take any\\n                        _wethPair,\\n                        address(this),\\n                        UINT256_MAX\\n                    );\\n                    uint256 afterBalance = IERC20(uniswapV2Router.WETH())\\n                        .balanceOf(address(this));\\n                    unitradeFee = afterBalance.sub(beforeBalance);\\n                } else {\\n                    uint256[] memory _ethSwapResult = uniswapV2Router\\n                        .swapExactTokensForETH(\\n                        _tokenFee,\\n                        0, //take any\\n                        _wethPair,\\n                        address(this),\\n                        UINT256_MAX\\n                    );\\n                    unitradeFee = _ethSwapResult[1];\\n                }\\n            }\\n        } else if (_executingOrder.swapType == SwapType.TokensForEth) {\\n            TransferHelper.safeApprove(\\n                _executingOrder.tokenIn,\\n                address(uniswapV2Router),\\n                amountIn\\n            );\\n            if (_executingOrder.deflationary) {\\n                uint256 beforeBalance = address(this).balance;\\n                uniswapV2Router\\n                    .swapExactTokensForETHSupportingFeeOnTransferTokens(\\n                    amountIn,\\n                    minAmountOut,\\n                    _addressPair,\\n                    address(this),\\n                    UINT256_MAX\\n                );\\n                uint256 afterBalance = address(this).balance;\\n                amounts = new uint256[](2);\\n                amounts[0] = amountIn;\\n                amounts[1] = afterBalance.sub(beforeBalance);\\n            } else {\\n                amounts = uniswapV2Router.swapExactTokensForETH(\\n                    amountIn,\\n                    minAmountOut,\\n                    _addressPair,\\n                    address(this),\\n                    UINT256_MAX\\n                );\\n            }\\n\\n            unitradeFee = amounts[1].mul(feeMul).div(feeDiv);\\n            if (amounts[1].sub(unitradeFee) > 0) {\\n                // Transfer to maker after post swap fee split\\n                TransferHelper.safeTransferETH(\\n                    _executingOrder.maker,\\n                    amounts[1].sub(unitradeFee)\\n                );\\n            }\\n        } else if (_executingOrder.swapType == SwapType.EthForTokens) {\\n            uint256 beforeBalance = IERC20(_executingOrder.tokenOut).balanceOf(\\n                _executingOrder.maker\\n            );\\n            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\\n                value: amountIn\\n            }(\\n                minAmountOut,\\n                _addressPair,\\n                _executingOrder.maker,\\n                UINT256_MAX\\n            );\\n            uint256 afterBalance = IERC20(_executingOrder.tokenOut).balanceOf(\\n                _executingOrder.maker\\n            );\\n            amounts = new uint256[](2);\\n            amounts[0] = amountIn;\\n            amounts[1] = afterBalance.sub(beforeBalance);\\n        }\\n\\n        // Transfer fee to incinerator/staker\\n        if (unitradeFee > 0) {\\n            uint256 burnAmount = unitradeFee.mul(splitMul).div(splitDiv);\\n            if (burnAmount > 0) {\\n                incinerator.burn{value: burnAmount}(); //no require\\n            }\\n            staker.deposit{value: unitradeFee.sub(burnAmount)}(); //no require\\n        }\\n\\n        // transfer fee to executor\\n        TransferHelper.safeTransferETH(msg.sender, _executingOrder.executorFee);\\n\\n        emit OrderExecuted(orderId, msg.sender, amounts, unitradeFee);\\n    }\\n\\n    function registerOrder(\\n        SwapType swapType,\\n        OrderType orderType,\\n        address payable maker,\\n        address tokenIn,\\n        address tokenOut,\\n        address pairAddress,\\n        uint256 amountInOffered,\\n        uint256 amountOutExpected,\\n        uint256 executorFee,\\n        uint256 totalEthDeposited,\\n        bool deflationary\\n    ) internal returns (uint256 orderId, Order memory) {\\n        // create order entries\\n        Order memory _order = Order({\\n            swapType: swapType,\\n            orderType: orderType,\\n            maker: maker,\\n            tokenIn: tokenIn,\\n            tokenOut: tokenOut,\\n            amountInOffered: amountInOffered,\\n            amountOutExpected: amountOutExpected,\\n            executorFee: executorFee,\\n            totalEthDeposited: totalEthDeposited,\\n            activeOrderIndex: activeOrders.length,\\n            orderState: OrderState.Placed,\\n            deflationary: deflationary\\n        });\\n\\n        activeOrders.push(orderNumber);\\n        orders[orderNumber] = _order;\\n        ordersForAddress[maker].push(orderNumber);\\n        ordersForAddress[pairAddress].push(orderNumber);\\n\\n        return (orderNumber++, _order);\\n    }\\n\\n    function proceedOrder(uint256 orderId, OrderState nextState)\\n        internal\\n        returns (bool)\\n    {\\n        Order memory _proceedingOrder = orders[orderId];\\n        require(\\n            _proceedingOrder.orderState == OrderState.Placed,\\n            \\\"Cannot proceed order\\\"\\n        );\\n\\n        if (activeOrders.length > 1) {\\n            uint256 _availableIndex = _proceedingOrder.activeOrderIndex;\\n            uint256 _lastOrderId = activeOrders[activeOrders.length - 1];\\n            Order memory _lastOrder = orders[_lastOrderId];\\n            _lastOrder.activeOrderIndex = _availableIndex;\\n            orders[_lastOrderId] = _lastOrder;\\n            activeOrders[_availableIndex] = _lastOrderId;\\n        }\\n\\n        activeOrders.pop();\\n        _proceedingOrder.orderState = nextState;\\n        _proceedingOrder.activeOrderIndex = UINT256_MAX; // indicate that it's not active\\n        orders[orderId] = _proceedingOrder;\\n\\n        return true;\\n    }\\n\\n    function getPair(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        address _pairAddress = uniswapV2Factory.getPair(tokenA, tokenB);\\n        require(_pairAddress != address(0), \\\"Unavailable pair address\\\");\\n        return _pairAddress;\\n    }\\n\\n    function getOrder(uint256 orderId)\\n        external\\n        view\\n        exists(orderId)\\n        returns (\\n            OrderType orderType,\\n            SwapType swapType,\\n            address payable maker,\\n            address tokenIn,\\n            address tokenOut,\\n            uint256 amountInOffered,\\n            uint256 amountOutExpected,\\n            uint256 executorFee,\\n            uint256 totalEthDeposited,\\n            OrderState orderState,\\n            bool deflationary\\n        )\\n    {\\n        Order memory _order = orders[orderId];\\n        return (\\n            _order.orderType,\\n            _order.swapType,\\n            _order.maker,\\n            _order.tokenIn,\\n            _order.tokenOut,\\n            _order.amountInOffered,\\n            _order.amountOutExpected,\\n            _order.executorFee,\\n            _order.totalEthDeposited,\\n            _order.orderState,\\n            _order.deflationary\\n        );\\n    }\\n\\n    function updateStaker(IUniTradeStaker newStaker) external onlyOwner {\\n        staker = newStaker;\\n        emit StakerUpdated(address(newStaker));\\n    }\\n\\n    function updateFee(uint16 _feeMul, uint16 _feeDiv) external onlyOwner {\\n        require(_feeMul < _feeDiv, \\\"!fee\\\");\\n        feeMul = _feeMul;\\n        feeDiv = _feeDiv;\\n    }\\n\\n    function updateSplit(uint16 _splitMul, uint16 _splitDiv)\\n        external\\n        onlyOwner\\n    {\\n        require(_splitMul < _splitDiv, \\\"!split\\\");\\n        splitMul = _splitMul;\\n        splitDiv = _splitDiv;\\n    }\\n\\n    function updateStopMargin(uint16 _stopMargin) external onlyOwner {\\n        require(_stopMargin < 100, \\\"stopMargin value should be between 0 and 100\\\");\\n        stopMargin = _stopMargin;\\n    }\\n\\n    function createPair(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        address[] memory _addressPair = new address[](2);\\n        _addressPair[0] = tokenA;\\n        _addressPair[1] = tokenB;\\n        return _addressPair;\\n    }\\n\\n    function getActiveOrdersLength() external view returns (uint256) {\\n        return activeOrders.length;\\n    }\\n\\n    function getActiveOrderId(uint256 index) external view returns (uint256) {\\n        return activeOrders[index];\\n    }\\n\\n    function getOrdersForAddressLength(address _address)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return ordersForAddress[_address].length;\\n    }\\n\\n    function getOrderIdForAddress(address _address, uint256 index)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return ordersForAddress[_address][index];\\n    }\\n\\n    receive() external payable {} // to receive ETH from Uniswap\\n}\\n\",\"keccak256\":\"0x4694f500b97e37dc8975d0d58f34e436edd264366e02e2510b060dcf4b173fd7\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IUniTradeStaker.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.7.6;\\n\\ninterface IUniTradeStaker\\n{\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x75b3f7e6e0d7f32b6db8d5a1f8cd8e67b6f8c9d17cc051c79f3f4f7b96b12fda\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061234c806100206000396000f3fe60806040526004361061008a5760003560e01c8063776af5ba11610059578063776af5ba146101f55780638da5cb5b1461020a578063c4d66de81461021f578063e8b0d7bf14610252578063f2fde38b1461026757610091565b80630b081600146100965780631694505e1461019857806359d0f713146101c9578063715018a6146101de57610091565b3661009157005b600080fd5b610148600480360360808110156100ac57600080fd5b60ff82351691908101906040810160208201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184602083028401116401000000008311171561010557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020013561029a565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561018457818101518382015260200161016c565b505050509050019250505060405180910390f35b3480156101a457600080fd5b506101ad6113d3565b604080516001600160a01b039092168252519081900360200190f35b3480156101d557600080fd5b506101ad6113e2565b3480156101ea57600080fd5b506101f36113f1565b005b34801561020157600080fd5b506101ad6114af565b34801561021657600080fd5b506101ad6114be565b34801561022b57600080fd5b506101f36004803603602081101561024257600080fd5b50356001600160a01b03166114cd565b34801561025e57600080fd5b506101f361168e565b34801561027357600080fd5b506101f36004803603602081101561028a57600080fd5b50356001600160a01b031661197e565b6060600260655414156102f4576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606555609754604080516315ab88c960e31b8152905133926000926001600160a01b039091169163ad5c464891600480820192602092909190829003018186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d602081101561036d57600080fd5b505186519091506000908790829061038157fe5b6020026020010151905060008760018951038151811061039d57fe5b602090810291909101015190508660018a60028111156103b957fe5b146105b05760028a60028111156103cc57fe5b141561043157836001600160a01b0316826001600160a01b031614610431576040805162461bcd60e51b81526020600482015260166024820152750a8ded6cadc40deeae840daeae6e840c4ca40ae8aa8960531b604482015290519081900360640190fd5b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d60208110156104aa57600080fd5b505190506104ba84333085611a93565b6000846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d602081101561053357600080fd5b50519050826105428284611bef565b14610554576105518183611bef565b92505b600083116105a9576040805162461bcd60e51b815260206004820152601c60248201527f496e76616c69642066696e616c206f66666572656420616d6f756e7400000000604482015290519081900360640190fd5b505061060e565b836001600160a01b0316836001600160a01b03161461060e576040805162461bcd60e51b81526020600482015260156024820152740a8ded6cadc40d2dc40daeae6e840c4ca40ae8aa89605b1b604482015290519081900360640190fd5b600060018b600281111561061e57fe5b1461063b5760975461063b9085906001600160a01b031684611c51565b60008b600281111561064957fe5b1415610cd9576000610758609960009054906101000a90046001600160a01b03166001600160a01b03166389a447e06040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d60208110156106cc57600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d602081101561074557600080fd5b5051869061ffff16611dba565b90611e1a565b90506000846001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d60208110156107d357600080fd5b50516097549091506001600160a01b0316635c11d7956107f38685611bef565b8c8f8c6000196040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610869578181015183820152602001610851565b505050509050019650505050505050600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506000856001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d602081101561092357600080fd5b505160408051600280825260608201835292935091906020830190803683370190505099506109528584611bef565b8a60008151811061095f57fe5b60209081029190910101526109748183611bef565b8a60018151811061098157fe5b60209081029190910101528215610cd1576000610a1788609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d6020811015610a1057600080fd5b5051611e81565b9050609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d6020811015610a9157600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d6020811015610b0557600080fd5b505160975460405163791ac94760e01b81526004810187815260006024830181905230606484018190526000196084850181905260a060448601908152885160a48701528851979a506001600160a01b039096169663791ac947968c9694958a95909260c490910190602087810191028083838b5b83811015610b92578181015183820152602001610b7a565b505050509050019650505050505050600060405180830381600087803b158015610bbb57600080fd5b505af1158015610bcf573d6000803e3d6000fd5b50505050609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d6020811015610c4b57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6020811015610cbf57600080fd5b50519150610ccd8284611bef565b9450505b5050506112e2565b60028b6002811115610ce757fe5b1415610fa1576000479050609760009054906101000a90046001600160a01b03166001600160a01b031663791ac947848b8e306000196040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610d8d578181015183820152602001610d75565b505050509050019650505050505050600060405180830381600087803b158015610db657600080fd5b505af1158015610dca573d6000803e3d6000fd5b5050604080516002808252606082018352479450909250906020830190803683370190505098508389600081518110610dff57fe5b6020908102919091010152610e148183611bef565b89600181518110610e2157fe5b602002602001018181525050610f4f609960009054906101000a90046001600160a01b03166001600160a01b03166389a447e06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d6020811015610ea857600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b158015610ef757600080fd5b505afa158015610f0b573d6000803e3d6000fd5b505050506040513d6020811015610f2157600080fd5b50518c5161ffff909116908d906001908110610f3957fe5b6020026020010151611dba90919063ffffffff16565b92506000610f7a848b600181518110610f6457fe5b6020026020010151611bef90919063ffffffff16565b1115610f9a57610f9a88610f95858c600181518110610f6457fe5b611f02565b50506112e2565b60018b6002811115610faf57fe5b14156112e2576099546040805163044d223f60e51b8152905134926110b0926001600160a01b03909116916389a447e091600480820192602092909190829003018186803b15801561100057600080fd5b505afa158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b5051849061ffff16611dba565b91506000846001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b50516097549091506001600160a01b031663b6f9de9561114b8486611bef565b8c8f8c6000196040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156111bb5781810151838201526020016111a3565b50505050905001955050505050506000604051808303818588803b1580156111e257600080fd5b505af11580156111f6573d6000803e3d6000fd5b50505050506000856001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d602081101561127457600080fd5b505160408051600280825260608201835292935091906020830190803683370190505099506112a38385611bef565b8a6000815181106112b057fe5b60209081029190910101526112c58183611bef565b8a6001815181106112d257fe5b6020026020010181815250505050505b856001600160a01b03167f718f223910cc75313d9c13a0f35e7088c058a4ddd62c8f72d11918c8727326a68b8b8b8b86604051808060200186815260200185815260200180602001848152602001838103835288818151815260200191508051906020019060200280838360005b83811015611368578181015183820152602001611350565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156113a757818101518382015260200161138f565b5050505090500197505050505050505060405180910390a2505060016065555092979650505050505050565b6097546001600160a01b031681565b6098546001600160a01b031681565b6113f9611ff5565b6001600160a01b031661140a6114be565b6001600160a01b031614611465576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6099546001600160a01b031681565b6033546001600160a01b031690565b600054610100900460ff16806114e657506114e6611ff9565b806114f4575060005460ff16155b61152f5760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff1615801561155a576000805460ff1961ff0019909116610100171660011790555b61156261200a565b816001600160a01b0316631694505e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d60208110156115c557600080fd5b5051609780546001600160a01b0319166001600160a01b03928316179055604080516359d0f71360e01b81529051918416916359d0f71391600480820192602092909190829003018186803b15801561161d57600080fd5b505afa158015611631573d6000803e3d6000fd5b505050506040513d602081101561164757600080fd5b5051609880546001600160a01b03199081166001600160a01b039384161790915560998054909116918416919091179055801561168a576000805461ff00191690555b5050565b47801561197b576000611798609960009054906101000a90046001600160a01b03166001600160a01b0316637e5a71876040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d602081101561171257600080fd5b50516099546040805163225df8e560e21b8152905161ffff90931692610752926001600160a01b031691638977e394916004808301926020929190829003018186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b5051859061ffff16611dba565b9050801561188c57609960009054906101000a90046001600160a01b03166001600160a01b0316631d44810d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ee57600080fd5b505afa158015611802573d6000803e3d6000fd5b505050506040513d602081101561181857600080fd5b50516040805163044df8e760e41b815290516001600160a01b03909216916344df8e70918491600480830192602092919082900301818588803b15801561185e57600080fd5b505af1158015611872573d6000803e3d6000fd5b50505050506040513d602081101561188957600080fd5b50505b60006118988383611bef565b9050801561197857609960009054906101000a90046001600160a01b03166001600160a01b0316635ebaf1db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ee57600080fd5b505afa158015611902573d6000803e3d6000fd5b505050506040513d602081101561191857600080fd5b505160408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561195e57600080fd5b505af1158015611972573d6000803e3d6000fd5b50505050505b50505b50565b611986611ff5565b6001600160a01b03166119976114be565b6001600160a01b0316146119f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a375760405162461bcd60e51b815260040180806020018281038252602681526020018061225b6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611b175780518252601f199092019160209182019101611af8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b79576040519150601f19603f3d011682016040523d82523d6000602084013e611b7e565b606091505b5091509150818015611bac575080511580611bac5750808060200190516020811015611ba957600080fd5b50515b611be75760405162461bcd60e51b81526004018080602001828103825260248152602001806122f36024913960400191505060405180910390fd5b505050505050565b600082821115611c46576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b60208310611ccd5780518252601f199092019160209182019101611cae565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d2f576040519150601f19603f3d011682016040523d82523d6000602084013e611d34565b606091505b5091509150818015611d62575080511580611d625750808060200190516020811015611d5f57600080fd5b50515b611db3576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b600082611dc957506000611c4b565b82820282848281611dd657fe5b0414611e135760405162461bcd60e51b81526004018080602001828103825260218152602001806122af6021913960400191505060405180910390fd5b9392505050565b6000808211611e70576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611e7957fe5b049392505050565b604080516002808252606080830184529260009291906020830190803683370190505090508381600081518110611eb457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611ee257fe5b6001600160a01b0390921660209283029190910190910152905092915050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310611f4e5780518252601f199092019160209182019101611f2f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611fb0576040519150601f19603f3d011682016040523d82523d6000602084013e611fb5565b606091505b50509050806119785760405162461bcd60e51b81526004018080602001828103825260238152602001806122d06023913960400191505060405180910390fd5b3390565b6000612004306120bb565b15905090565b600054610100900460ff16806120235750612023611ff9565b80612031575060005460ff16155b61206c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff16158015612097576000805460ff1961ff0019909116610100171660011790555b61209f6120c1565b6120a7612161565b801561197b576000805461ff001916905550565b3b151590565b600054610100900460ff16806120da57506120da611ff9565b806120e8575060005460ff16155b6121235760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff161580156120a7576000805460ff1961ff001990911661010017166001179055801561197b576000805461ff001916905550565b600054610100900460ff168061217a575061217a611ff9565b80612188575060005460ff16155b6121c35760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff161580156121ee576000805460ff1961ff0019909116610100171660011790555b60006121f8611ff5565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561197b576000805461ff00191690555056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212207e3f5485393d1c24e277d8e4405f5399d7842915802fddc0ea90b8bc6511f31f64736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063776af5ba11610059578063776af5ba146101f55780638da5cb5b1461020a578063c4d66de81461021f578063e8b0d7bf14610252578063f2fde38b1461026757610091565b80630b081600146100965780631694505e1461019857806359d0f713146101c9578063715018a6146101de57610091565b3661009157005b600080fd5b610148600480360360808110156100ac57600080fd5b60ff82351691908101906040810160208201356401000000008111156100d157600080fd5b8201836020820111156100e357600080fd5b8035906020019184602083028401116401000000008311171561010557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020013561029a565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561018457818101518382015260200161016c565b505050509050019250505060405180910390f35b3480156101a457600080fd5b506101ad6113d3565b604080516001600160a01b039092168252519081900360200190f35b3480156101d557600080fd5b506101ad6113e2565b3480156101ea57600080fd5b506101f36113f1565b005b34801561020157600080fd5b506101ad6114af565b34801561021657600080fd5b506101ad6114be565b34801561022b57600080fd5b506101f36004803603602081101561024257600080fd5b50356001600160a01b03166114cd565b34801561025e57600080fd5b506101f361168e565b34801561027357600080fd5b506101f36004803603602081101561028a57600080fd5b50356001600160a01b031661197e565b6060600260655414156102f4576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606555609754604080516315ab88c960e31b8152905133926000926001600160a01b039091169163ad5c464891600480820192602092909190829003018186803b15801561034357600080fd5b505afa158015610357573d6000803e3d6000fd5b505050506040513d602081101561036d57600080fd5b505186519091506000908790829061038157fe5b6020026020010151905060008760018951038151811061039d57fe5b602090810291909101015190508660018a60028111156103b957fe5b146105b05760028a60028111156103cc57fe5b141561043157836001600160a01b0316826001600160a01b031614610431576040805162461bcd60e51b81526020600482015260166024820152750a8ded6cadc40deeae840daeae6e840c4ca40ae8aa8960531b604482015290519081900360640190fd5b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561048057600080fd5b505afa158015610494573d6000803e3d6000fd5b505050506040513d60208110156104aa57600080fd5b505190506104ba84333085611a93565b6000846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d602081101561053357600080fd5b50519050826105428284611bef565b14610554576105518183611bef565b92505b600083116105a9576040805162461bcd60e51b815260206004820152601c60248201527f496e76616c69642066696e616c206f66666572656420616d6f756e7400000000604482015290519081900360640190fd5b505061060e565b836001600160a01b0316836001600160a01b03161461060e576040805162461bcd60e51b81526020600482015260156024820152740a8ded6cadc40d2dc40daeae6e840c4ca40ae8aa89605b1b604482015290519081900360640190fd5b600060018b600281111561061e57fe5b1461063b5760975461063b9085906001600160a01b031684611c51565b60008b600281111561064957fe5b1415610cd9576000610758609960009054906101000a90046001600160a01b03166001600160a01b03166389a447e06040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a257600080fd5b505afa1580156106b6573d6000803e3d6000fd5b505050506040513d60208110156106cc57600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d602081101561074557600080fd5b5051869061ffff16611dba565b90611e1a565b90506000846001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d60208110156107d357600080fd5b50516097549091506001600160a01b0316635c11d7956107f38685611bef565b8c8f8c6000196040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610869578181015183820152602001610851565b505050509050019650505050505050600060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506000856001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108f957600080fd5b505afa15801561090d573d6000803e3d6000fd5b505050506040513d602081101561092357600080fd5b505160408051600280825260608201835292935091906020830190803683370190505099506109528584611bef565b8a60008151811061095f57fe5b60209081029190910101526109748183611bef565b8a60018151811061098157fe5b60209081029190910101528215610cd1576000610a1788609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d6020811015610a1057600080fd5b5051611e81565b9050609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d6020811015610a9157600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610adb57600080fd5b505afa158015610aef573d6000803e3d6000fd5b505050506040513d6020811015610b0557600080fd5b505160975460405163791ac94760e01b81526004810187815260006024830181905230606484018190526000196084850181905260a060448601908152885160a48701528851979a506001600160a01b039096169663791ac947968c9694958a95909260c490910190602087810191028083838b5b83811015610b92578181015183820152602001610b7a565b505050509050019650505050505050600060405180830381600087803b158015610bbb57600080fd5b505af1158015610bcf573d6000803e3d6000fd5b50505050609760009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015610c2157600080fd5b505afa158015610c35573d6000803e3d6000fd5b505050506040513d6020811015610c4b57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610c9557600080fd5b505afa158015610ca9573d6000803e3d6000fd5b505050506040513d6020811015610cbf57600080fd5b50519150610ccd8284611bef565b9450505b5050506112e2565b60028b6002811115610ce757fe5b1415610fa1576000479050609760009054906101000a90046001600160a01b03166001600160a01b031663791ac947848b8e306000196040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015610d8d578181015183820152602001610d75565b505050509050019650505050505050600060405180830381600087803b158015610db657600080fd5b505af1158015610dca573d6000803e3d6000fd5b5050604080516002808252606082018352479450909250906020830190803683370190505098508389600081518110610dff57fe5b6020908102919091010152610e148183611bef565b89600181518110610e2157fe5b602002602001018181525050610f4f609960009054906101000a90046001600160a01b03166001600160a01b03166389a447e06040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7e57600080fd5b505afa158015610e92573d6000803e3d6000fd5b505050506040513d6020811015610ea857600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b158015610ef757600080fd5b505afa158015610f0b573d6000803e3d6000fd5b505050506040513d6020811015610f2157600080fd5b50518c5161ffff909116908d906001908110610f3957fe5b6020026020010151611dba90919063ffffffff16565b92506000610f7a848b600181518110610f6457fe5b6020026020010151611bef90919063ffffffff16565b1115610f9a57610f9a88610f95858c600181518110610f6457fe5b611f02565b50506112e2565b60018b6002811115610faf57fe5b14156112e2576099546040805163044d223f60e51b8152905134926110b0926001600160a01b03909116916389a447e091600480820192602092909190829003018186803b15801561100057600080fd5b505afa158015611014573d6000803e3d6000fd5b505050506040513d602081101561102a57600080fd5b50516099546040805163029f0d3d60e51b8152905161ffff90931692610752926001600160a01b0316916353e1a7a0916004808301926020929190829003018186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b5051849061ffff16611dba565b91506000846001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561110157600080fd5b505afa158015611115573d6000803e3d6000fd5b505050506040513d602081101561112b57600080fd5b50516097549091506001600160a01b031663b6f9de9561114b8486611bef565b8c8f8c6000196040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156111bb5781810151838201526020016111a3565b50505050905001955050505050506000604051808303818588803b1580156111e257600080fd5b505af11580156111f6573d6000803e3d6000fd5b50505050506000856001600160a01b03166370a082318a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561124a57600080fd5b505afa15801561125e573d6000803e3d6000fd5b505050506040513d602081101561127457600080fd5b505160408051600280825260608201835292935091906020830190803683370190505099506112a38385611bef565b8a6000815181106112b057fe5b60209081029190910101526112c58183611bef565b8a6001815181106112d257fe5b6020026020010181815250505050505b856001600160a01b03167f718f223910cc75313d9c13a0f35e7088c058a4ddd62c8f72d11918c8727326a68b8b8b8b86604051808060200186815260200185815260200180602001848152602001838103835288818151815260200191508051906020019060200280838360005b83811015611368578181015183820152602001611350565b50505050905001838103825285818151815260200191508051906020019060200280838360005b838110156113a757818101518382015260200161138f565b5050505090500197505050505050505060405180910390a2505060016065555092979650505050505050565b6097546001600160a01b031681565b6098546001600160a01b031681565b6113f9611ff5565b6001600160a01b031661140a6114be565b6001600160a01b031614611465576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6099546001600160a01b031681565b6033546001600160a01b031690565b600054610100900460ff16806114e657506114e6611ff9565b806114f4575060005460ff16155b61152f5760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff1615801561155a576000805460ff1961ff0019909116610100171660011790555b61156261200a565b816001600160a01b0316631694505e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561159b57600080fd5b505afa1580156115af573d6000803e3d6000fd5b505050506040513d60208110156115c557600080fd5b5051609780546001600160a01b0319166001600160a01b03928316179055604080516359d0f71360e01b81529051918416916359d0f71391600480820192602092909190829003018186803b15801561161d57600080fd5b505afa158015611631573d6000803e3d6000fd5b505050506040513d602081101561164757600080fd5b5051609880546001600160a01b03199081166001600160a01b039384161790915560998054909116918416919091179055801561168a576000805461ff00191690555b5050565b47801561197b576000611798609960009054906101000a90046001600160a01b03166001600160a01b0316637e5a71876040518163ffffffff1660e01b815260040160206040518083038186803b1580156116e857600080fd5b505afa1580156116fc573d6000803e3d6000fd5b505050506040513d602081101561171257600080fd5b50516099546040805163225df8e560e21b8152905161ffff90931692610752926001600160a01b031691638977e394916004808301926020929190829003018186803b15801561176157600080fd5b505afa158015611775573d6000803e3d6000fd5b505050506040513d602081101561178b57600080fd5b5051859061ffff16611dba565b9050801561188c57609960009054906101000a90046001600160a01b03166001600160a01b0316631d44810d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ee57600080fd5b505afa158015611802573d6000803e3d6000fd5b505050506040513d602081101561181857600080fd5b50516040805163044df8e760e41b815290516001600160a01b03909216916344df8e70918491600480830192602092919082900301818588803b15801561185e57600080fd5b505af1158015611872573d6000803e3d6000fd5b50505050506040513d602081101561188957600080fd5b50505b60006118988383611bef565b9050801561197857609960009054906101000a90046001600160a01b03166001600160a01b0316635ebaf1db6040518163ffffffff1660e01b815260040160206040518083038186803b1580156118ee57600080fd5b505afa158015611902573d6000803e3d6000fd5b505050506040513d602081101561191857600080fd5b505160408051630d0e30db60e41b815290516001600160a01b039092169163d0e30db0918491600480830192600092919082900301818588803b15801561195e57600080fd5b505af1158015611972573d6000803e3d6000fd5b50505050505b50505b50565b611986611ff5565b6001600160a01b03166119976114be565b6001600160a01b0316146119f2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611a375760405162461bcd60e51b815260040180806020018281038252602681526020018061225b6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310611b175780518252601f199092019160209182019101611af8565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611b79576040519150601f19603f3d011682016040523d82523d6000602084013e611b7e565b606091505b5091509150818015611bac575080511580611bac5750808060200190516020811015611ba957600080fd5b50515b611be75760405162461bcd60e51b81526004018080602001828103825260248152602001806122f36024913960400191505060405180910390fd5b505050505050565b600082821115611c46576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b60208310611ccd5780518252601f199092019160209182019101611cae565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d2f576040519150601f19603f3d011682016040523d82523d6000602084013e611d34565b606091505b5091509150818015611d62575080511580611d625750808060200190516020811015611d5f57600080fd5b50515b611db3576040805162461bcd60e51b815260206004820152601e60248201527f5472616e7366657248656c7065723a20415050524f56455f4641494c45440000604482015290519081900360640190fd5b5050505050565b600082611dc957506000611c4b565b82820282848281611dd657fe5b0414611e135760405162461bcd60e51b81526004018080602001828103825260218152602001806122af6021913960400191505060405180910390fd5b9392505050565b6000808211611e70576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611e7957fe5b049392505050565b604080516002808252606080830184529260009291906020830190803683370190505090508381600081518110611eb457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508281600181518110611ee257fe5b6001600160a01b0390921660209283029190910190910152905092915050565b604080516000808252602082019092526001600160a01b0384169083906040518082805190602001908083835b60208310611f4e5780518252601f199092019160209182019101611f2f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611fb0576040519150601f19603f3d011682016040523d82523d6000602084013e611fb5565b606091505b50509050806119785760405162461bcd60e51b81526004018080602001828103825260238152602001806122d06023913960400191505060405180910390fd5b3390565b6000612004306120bb565b15905090565b600054610100900460ff16806120235750612023611ff9565b80612031575060005460ff16155b61206c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff16158015612097576000805460ff1961ff0019909116610100171660011790555b61209f6120c1565b6120a7612161565b801561197b576000805461ff001916905550565b3b151590565b600054610100900460ff16806120da57506120da611ff9565b806120e8575060005460ff16155b6121235760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff161580156120a7576000805460ff1961ff001990911661010017166001179055801561197b576000805461ff001916905550565b600054610100900460ff168061217a575061217a611ff9565b80612188575060005460ff16155b6121c35760405162461bcd60e51b815260040180806020018281038252602e815260200180612281602e913960400191505060405180910390fd5b600054610100900460ff161580156121ee576000805460ff1961ff0019909116610100171660011790555b60006121f8611ff5565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561197b576000805461ff00191690555056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45445472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a26469706673582212207e3f5485393d1c24e277d8e4405f5399d7842915802fddc0ea90b8bc6511f31f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 917,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 932,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 975,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1780,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IUniswapV2Router02)1595"
      },
      {
        "astId": 1782,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "uniswapV2Factory",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IUniswapV2Factory)1199"
      },
      {
        "astId": 1784,
        "contract": "contracts/UniTradeMarketOrders.sol:UniTradeMarketOrders",
        "label": "orderBook",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(UniTradeOrderBook)4294"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Factory)1199": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)1595": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_contract(UniTradeOrderBook)4294": {
        "encoding": "inplace",
        "label": "contract UniTradeOrderBook",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}